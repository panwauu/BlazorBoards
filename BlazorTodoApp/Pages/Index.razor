@page "/"

<PageTitle>BlazorBoards</PageTitle>

<div class="boards">
    @foreach (var index in _Boards.Select((e, i) => i))
    {
        <TaskBoard @bind-BoardData="_Boards[index]" 
            globalDragStart="@dragStart" 
            globalDragDrop="@((a) => dragDrop(a.insertAtBoardId,a.insertAtBoardPosition))" 
        />
    }
</div>

<!--a

Boards -> BoardComponent
   Cards (Deadline, Title, Description, ToDos, ...) -> CardOverview, CardDetails

C#-Classes
Board
Task
ChecklistItem
Label


SQL:
Boards
- id
- name

Tasks
- id
- board_id
- [label_id]
- title
...

Labels
- id
- title
- color
-->
@code {
    private new List<Board> _Boards { get; set; }

    protected override void OnInitialized()
    {
        _Boards = new List<Board>();
        _Boards.Add(new Board("In progress") { });
        _Boards.Add(new Board("Backlog") { });
        _Boards.Add(new Board("Done") { });
        _Boards[0].Tasks.Add(new TaskItem("Task 1") { });
        _Boards[0].Tasks.Add(new TaskItem("Task 2") { });
        _Boards[1].Tasks.Add(new TaskItem("Task 1") { });
        _Boards[1].Tasks.Add(new TaskItem("Task 2") { });

        _Boards[0].Tasks[0].Labels.Add(new Label("prio1", "black", "red"));
        _Boards[0].Tasks[0].Labels.Add(new Label("prio2", "white", "blue"));
        _Boards[0].Tasks[0].Checklist.Add(new ChecklistItem("Checklist 1"));
        _Boards[0].Tasks[0].Deadline = DateTime.Now;
    }


    private TaskItem? DraggedTask;
    private void dragStart(TaskItem task)
    {
        DraggedTask = task;
    }
    private void dragEnd()
    {
        DraggedTask = null;
    }
    private void dragDrop(string insertAtBoardId, int insertAtBoardPosition)
    {
        if (DraggedTask == null) return;

        Board? boardToRemoveFrom = _Boards.Find(b => b.Tasks.Contains(DraggedTask));
        if (boardToRemoveFrom == null)
        {
            DraggedTask = null;
            return;
        }

        int positionToRemoveFrom = boardToRemoveFrom.Tasks.FindIndex(t => t.Id == DraggedTask.Id);
        if (positionToRemoveFrom == -1)
        {
            DraggedTask = null;
            return;
        }

        Board? boardToInsertTo = _Boards.Find(b => b.Id == insertAtBoardId);
        if (boardToInsertTo == null) 
        {
            DraggedTask = null; 
            return;
        }

        if (boardToInsertTo.Id == boardToRemoveFrom.Id && positionToRemoveFrom < insertAtBoardPosition)
        {
            insertAtBoardPosition--;
        }

        boardToRemoveFrom.Tasks.Remove(DraggedTask);
        boardToInsertTo.Tasks.Insert(insertAtBoardPosition, DraggedTask);
        DraggedTask = null;
    }
}
