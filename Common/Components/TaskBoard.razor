<div class="card board">
    <h5>@BoardData.Title</h5>
    <div>
        @foreach (var index in BoardData.Tasks.Select((e, i) => i))
        {
            <div hidden="@(BoardData.Id != dragHelper.InsertAtBoard?.Id || dragHelper.InsertAtBoardPosition != index)" style="width: 100%; height: 2px; background: red;"></div>
            <div draggable="true"
                 id="@BoardData.Tasks[index].Id"
            @ondragover="@( () => globalDragEnter.InvokeAsync(index) )"
            @ondragover:preventDefault="true"
            @key=@BoardData.Tasks[index].Id
            @ondragstart="@( () => globalDragStart.InvokeAsync(BoardData.Tasks[index]))"
            @ondragend="@( () => globalDragEnd.InvokeAsync() )"
            @ondragenter="@( () => globalDragEnter.InvokeAsync(index) )"
            @ondragleave="@( () => globalDragLeave.InvokeAsync() )"
            @ondrop="@( () => globalDragDrop.InvokeAsync((BoardData.Id, index)))">
                <TaskOverview @bind-TaskData="BoardData.Tasks[index]" />
            </div>
        }
        <div hidden="@(BoardData.Id != dragHelper.InsertAtBoard?.Id || dragHelper.InsertAtBoardPosition != BoardData.Tasks.Count)" style="width: 100%; height: 2px; background: red;"></div>
        <div class="add-task"
             ondragover="event.preventDefault();"
        @ondragenter="@( () => globalDragEnter.InvokeAsync(BoardData.Tasks.Count) )"
        @ondragleave="@( () => globalDragLeave.InvokeAsync() )"
        @ondrop="@( () => globalDragDrop.InvokeAsync((BoardData.Id, BoardData.Tasks.Count)) )">
            <Button Color="Color.Primary" @onclick="AddTask" Outline><Icon Name="IconName.Add" /></Button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Board BoardData { get; set; } = default!;

    [Parameter]
    public EventCallback<Board> BoardDataChanged { get; set; }

    [Parameter]
    public DragHelper dragHelper { get; set; } = default!;

    [Parameter]
    public EventCallback<TaskItem> globalDragStart { get; set; }
    [Parameter]
    public EventCallback globalDragEnd { get; set; }
    [Parameter]
    public EventCallback<(string insertAtBoardId, int insertAtBoardPosition)> globalDragDrop { get; set; }
    [Parameter]
    public EventCallback<int> globalDragEnter { get; set; }
    [Parameter]
    public EventCallback globalDragLeave { get; set; }

    private void AddTask()
    {
        BoardData.Tasks.Add(new TaskItem("Task"));
    }
}
