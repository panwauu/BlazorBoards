@page "/labels"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject AppData appData
@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using System.ComponentModel

<PageTitle>Labels</PageTitle>

<h3>Labels</h3>

<div class="labels">
    @foreach (var index in appData.blazorBoardData.Labels.Select((e, i) => i))
    {
        <input type="text" class="label-element label-text editable-input" style="background: @appData.blazorBoardData.Labels[index].Background; color: @appData.blazorBoardData.Labels[index].Color" @bind-value="appData.blazorBoardData.Labels[index].Title" />
        <input type="color" class="label-element label-background editable-input" style="background: @appData.blazorBoardData.Labels[index].Background" @bind-value="appData.blazorBoardData.Labels[index].Background" />
        <input type="color" class="label-element label-color editable-input" style="background: @appData.blazorBoardData.Labels[index].Background" @bind-value="appData.blazorBoardData.Labels[index].Color" />
        <button class="btn label-element label-delete" style="background: @appData.blazorBoardData.Labels[index].Background; color: @appData.blazorBoardData.Labels[index].Color" @onclick="() => DeleteLabel(index)">x</button>
    }
</div>

<button class="btn btn-primary" @onclick="AddLabel">+</button>

@code {
    private void AddLabel()
    {
        var random = new Random();
        Label newLabel = new Label("Label", "#000000", $"#{random.Next(0, 256).ToString("X2")}{random.Next(0, 256).ToString("X2")}{random.Next(0, 256).ToString("X2")}");
        newLabel.PropertyChanged += appData.ChangedHandler;
        appData.blazorBoardData.Labels.Add(newLabel);
    }

    private void DeleteLabel(int index)
    {
        appData.blazorBoardData.Labels.RemoveAt(index);
    }
}
